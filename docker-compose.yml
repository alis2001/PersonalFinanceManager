version: '3.8'

services:
  # Database Services
  postgres:
    image: postgres:15-alpine
    container_name: finance-postgres
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${DB_EXTERNAL_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/database/init:/docker-entrypoint-initdb.d
    networks:
      - finance-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: finance-redis
    env_file:
      - .env
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    networks:
      - finance-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: finance-rabbitmq
    env_file:
      - .env
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    ports:
      - "${RABBITMQ_PORT}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT}:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - finance-network
    restart: unless-stopped
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

  # API Gateway - FROM DOCKERHUB v3
  gateway:
    build:
      context: ./services/gateway
      dockerfile: Dockerfile
    container_name: finance-gateway
    env_file:
      - .env
    ports:
      - "${GATEWAY_PORT}:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      auth:
        condition: service_started
      expense:
        condition: service_started
      income:
        condition: service_started
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=3000
      - AUTH_SERVICE_URL=http://auth:3000
      - EXPENSE_SERVICE_URL=http://expense:3000
      - INCOME_SERVICE_URL=http://income:3000
      - CATEGORY_SERVICE_URL=http://category:3000
      - ANALYTICS_SERVICE_URL=http://analytics:8000
      - ANALYTICS_ENGINE_URL=http://analytics-engine:8080
      - REPORTING_ENGINE_URL=http://reporting-engine:8080
      - ML_ENGINE_URL=http://ml-engine:8080
      - ENABLE_CORS=${ENABLE_CORS}
      - PUBLIC_IP=${PUBLIC_IP}
      - FRONTEND_URL=${FRONTEND_URL}
      - API_URL=${API_URL}
      - RATE_LIMIT_WINDOW=${RATE_LIMIT_WINDOW}
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS}
    networks:
      - finance-network
    restart: unless-stopped

  # Analytics Service - FROM DOCKERHUB v3
  analytics:
    image: alis2001/finance-analytics:v3
    container_name: finance-analytics-api
    env_file:
      - .env
    ports:
      - "${ANALYTICS_SERVICE_PORT}:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - PYTHON_ENV=${APP_ENV}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - LOG_LEVEL=${LOG_LEVEL}
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - finance-network
    restart: unless-stopped

  # Node.js Microservices - FROM DOCKERHUB v3
  auth:
    image: alis2001/finance-auth:v3
    container_name: finance-auth
    env_file:
      - .env
    ports:
      - "${AUTH_SERVICE_PORT}:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - NODE_ENV=${APP_ENV}
      - PORT=3000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRY=${JWT_EXPIRY}
      - BCRYPT_ROUNDS=${BCRYPT_ROUNDS}
      - SESSION_TIMEOUT=${SESSION_TIMEOUT}
      # Email configuration
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_SECURE=${SMTP_SECURE}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMTP_FROM_NAME=${SMTP_FROM_NAME}
      - SMTP_FROM_EMAIL=${SMTP_FROM_EMAIL}
    networks:
      - finance-network
    restart: unless-stopped

  expense:
    image: alis2001/finance-expense:v3
    container_name: finance-expense
    env_file:
      - .env
    ports:
      - "${EXPENSE_SERVICE_PORT}:3000"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - NODE_ENV=${APP_ENV}
      - PORT=3000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_PASS=${RABBITMQ_DEFAULT_PASS}
    networks:
      - finance-network
    restart: unless-stopped

  income:
    image: alis2001/finance-income:v3
    container_name: finance-income
    env_file:
      - .env
    ports:
      - "${INCOME_SERVICE_PORT}:3000"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - NODE_ENV=${APP_ENV}
      - PORT=3000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_PASS=${RABBITMQ_DEFAULT_PASS}
    networks:
      - finance-network
    restart: unless-stopped

  category:
    image: alis2001/finance-category:v3
    container_name: finance-category
    env_file:
      - .env
    ports:
      - "${CATEGORY_SERVICE_PORT}:3000"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - NODE_ENV=${APP_ENV}
      - PORT=3000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
    networks:
      - finance-network
    restart: unless-stopped

  # C++ Engines - FROM DOCKERHUB v3
  analytics-engine:
    image: alis2001/finance-analytics-engine:v3
    container_name: finance-analytics
    env_file:
      - .env
    ports:
      - "${ANALYTICS_ENGINE_PORT}:8080"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - LOG_LEVEL=${LOG_LEVEL}
      - APP_ENV=${APP_ENV}
    networks:
      - finance-network
    restart: unless-stopped

  reporting-engine:
    image: alis2001/finance-reporting-engine:v3
    container_name: finance-reporting
    env_file:
      - .env
    ports:
      - "${REPORTING_ENGINE_PORT}:8080"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - LOG_LEVEL=${LOG_LEVEL}
      - APP_ENV=${APP_ENV}
    networks:
      - finance-network
    restart: unless-stopped

  ml-engine:
    image: alis2001/finance-ml-engine:v3
    container_name: finance-ml
    env_file:
      - .env
    ports:
      - "${ML_ENGINE_PORT}:8080"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - LOG_LEVEL=${LOG_LEVEL}
      - APP_ENV=${APP_ENV}
    networks:
      - finance-network
    restart: unless-stopped

  # FIXED: Web Frontend with correct API URL
  web:
    image: alis2001/finance-web:v4
    container_name: finance-web
    env_file:
      - .env
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=${APP_ENV}
      # FIXED: This won't work at runtime, but v4 image will have correct build-time URL
    networks:
      - finance-network
    restart: unless-stopped
    depends_on:
      - gateway

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local

networks:
  finance-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16